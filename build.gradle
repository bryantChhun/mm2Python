

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'

    id 'jacoco'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

version = '1.0'

sourceSets
        {
            main
                    {
                        java
                                { srcDir 'src/main/java' }
                    }
            test
                    {
                        java
                                { srcDir 'src/test/java' }
                    }
        }

//sourceCompatibility = 1.7
//targetCompatibility = 1.7



configurations {
    compile
    core_libs
//    plugin_libs
//    complete_libs
}

import org.gradle.internal.os.OperatingSystem

String core_plugin_path
String app_path

/***
 * Provide the core_plugin_path to your installation of micromanager 2.0
 * Privde the app_path to the installation used for testing
 */
if(OperatingSystem.current().isMacOsX()) {
    core_plugin_path = '/Applications/Micro-Manager-2.0.0-beta3-20181001/plugins/Micro-Manager'
    app_path = '/Applications/Micro-Manager-2.0.0-beta3-20181001/'
} else if(OperatingSystem.current().isWindows()) {
    core_plugin_path = 'C:\\Applications\\Micro-Manager-2.0.0-beta3-20181001\\plugins\\Micro-Manager'
    app_path = 'C:\\Applications\\Micro-Manager-2.0.0-beta3-20181001'
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // JUnit 5
    compile group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.2.0'
    compile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.2.0'
    compile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.2.0'

    // Micromanager core jars
    compile fileTree(include: ['*.jar'], exclude: 'mm2Python.jar', dir: core_plugin_path)

    // ImageJ
    compile fileTree(include: ['*.jar'], dir: app_path+'/ij.jar')

    //zeroMQ
    // compile group: 'org.zeromq', name: 'jzmq', version: '2.1.0'

    //Py4J
    compile group: 'net.sf.py4j', name: 'py4j', version: '0.10.8.1'
    core_libs group: 'net.sf.py4j', name: 'py4j', version: '0.10.8.1'

    // IntelliJ mm2python.UI Designer
    compile group: 'com.intellij', name: 'forms_rt', version: '7.0.3'
    core_libs group: 'com.intellij', name: 'forms_rt', version: '7.0.3'


}

repositories {
    jcenter()
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.3"
//    reportsDir = file("${buildDir}/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = true
        html.enabled = true
//        html.destination file("${buildDir}/jacocoHtml")
    }
}

test {
    testLogging.showStandardStreams = true
    testLogging {
        events "passed", "skipped", "failed"
    }

    exclude '**/demo/**'
    exclude 'ConstantsTests'

    maxHeapSize = "16G"
}


jar {
    archiveName = "mm2Python.jar"
    from {
        configurations.core_libs.collect {it.isDirectory() ? it : zipTree(it) }
    }
    project.logger.lifecycle("creating Core Jar with dependencies")
}


task copyCoreToMM(type: Copy) {
    if(OperatingSystem.current().isMacOsX()) {
        from 'build/libs/mm2Python.jar'
        into core_plugin_path
        project.logger.lifecycle("moving CORE jar to micro-manager root")
    }
    else if(OperatingSystem.current().isWindows()) {
        from 'build/libs/mm2Python.jar'
        into core_plugin_path
        project.logger.lifecycle("moving CORE jar to micro-manager root")
    }
}





//task codeCoverageReport(type: JacocoReport) {
//    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
//
//    subprojects.each {
//        sourceSets it.sourceSets.main
//    }
//
//    reports {
//        xml.enabled true
//        html.enabled false
//        csv.enabled false
//    }
//}


// PUBLISHING

//group   = project.ext.groupname
//version = project.ext.versionsMap[project.name]
//
//artifacts
//        {
//            archives sourcesJar
//            archives javadocJar
//        }
//
//publishing {
//    publications {
//        maven(MavenPublication) {
//            from components.java
//            artifact sourcesJar { classifier "sources" }
//        }
//    }
//}
