/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.9/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

version = '1.0'

sourceSets
        {
            main
                    {
                        java
                                { srcDir 'src/main/java' }
                    }
            test
                    {
                        java
                                { srcDir 'src/test/java' }
                    }
        }

//sourceCompatibility = 1.7
//targetCompatibility = 1.7

test {
    testLogging.showStandardStreams = true
    testLogging {
        events "passed", "skipped", "failed"
    }

    exclude '**/demo/**'
    exclude 'ConstantsTests'

    maxHeapSize = "16G"
}

configurations {
    compile
    core_libs
    plugin_libs
    complete_libs
}

import org.gradle.internal.os.OperatingSystem

String core_plugin_path
String app_path

/***
 * Provide the core_plugin_path to your installation of micromanager 2.0
 * Privde the app_path to the installation used for testing
 */
if(OperatingSystem.current().isMacOsX()) {
    core_plugin_path = '/Applications/Micro-Manager-2.0.0-beta3-20181001/plugins/Micro-Manager'
    app_path = '/Applications/Micro-Manager-2.0.0-beta3-20181001/'
} else if(OperatingSystem.current().isWindows()) {
    core_plugin_path = 'C:\\Applications\\Micro-Manager-2.0.0-beta3-20181001\\plugins\\Micro-Manager'
    app_path = 'C:\\Applications\\Micro-Manager-2.0.0-beta3-20181001'
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // JUnit 5
    compile group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.2.0'
    compile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.2.0'
    compile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.2.0'

    // Micromanager core jars
    compile fileTree(include: ['*.jar'], exclude: 'mm2Python.jar', dir: core_plugin_path)
    plugin_libs fileTree(include: ['*.jar'], dir: core_plugin_path)
    complete_libs fileTree(include: ['*.jar'], dir: core_plugin_path)

    // ImageJ
    compile fileTree(include: ['*.jar'], dir: app_path+'/ij.jar')
    plugin_libs fileTree(include: ['*.jar'], dir: app_path+'/ij.jar')
    complete_libs fileTree(include: ['*.jar'], dir: app_path+'/ij.jar')

    //zeroMQ
    // compile group: 'org.zeromq', name: 'jzmq', version: '2.1.0'

    //Py4J
    compile group: 'net.sf.py4j', name: 'py4j', version: '0.10.8.1'
    core_libs group: 'net.sf.py4j', name: 'py4j', version: '0.10.8.1'
    complete_libs group: 'net.sf.py4j', name: 'py4j', version: '0.10.8.1'

    // IntelliJ mm2python.UI Designer
    compile group: 'com.intellij', name: 'forms_rt', version: '7.0.3'
    core_libs group: 'com.intellij', name: 'forms_rt', version: '7.0.3'
    complete_libs group: 'com.intellij', name: 'forms_rt', version: '7.0.3'

}

repositories {
    jcenter()
    mavenCentral()
}


jar {
    archiveName = "mm2Python.jar"
//    from sourceSets.main.output
//    exclude '/mm2PythonPlugin.class'
    exclude "/mm2python/Maps/Maps.class"
    from {
        configurations.core_libs.collect {it.isDirectory() ? it : zipTree(it) }
    }
    project.logger.lifecycle("creating Core Jar with dependencies")
}


task copyCoreToMM(type: Copy) {
    if(OperatingSystem.current().isMacOsX()) {
        from 'build/libs/mm2Python.jar'
        into core_plugin_path
        project.logger.lifecycle("moving CORE jar to micro-manager root")
    }
    else if(OperatingSystem.current().isWindows()) {
        from 'build/libs/mm2Python.jar'
        into core_plugin_path
        project.logger.lifecycle("moving CORE jar to micro-manager root")
    }
}