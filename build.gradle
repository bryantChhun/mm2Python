/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.9/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

version = '1.0'

sourceSets
        {
            main
                    {
                        java
                                { srcDir 'src/main/java' }
//                        resources
//                                {srcDir 'src/main/resources'}
                    }
            test
                    {
                        java
                                { srcDir 'src/test/java' }
//                        resources
//                                { srcDir 'src/test/resources' }
                    }
        }

//sourceCompatibility = 1.7
//targetCompatibility = 1.7

configurations {
    core_libs
    plugin_libs
    complete_libs
}

import org.gradle.internal.os.OperatingSystem

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // JUnit 5
    compile group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.2.0'
    compile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.2.0'
    compile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.2.0'
//    ['compile', 'plugin_libs'].each{ conf -> compile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.2.0', configuration: conf }

    if(OperatingSystem.current().isMacOsX()) {

        // Micromanager core jars
        compile fileTree(include: ['*.jar'], exclude: 'mm2Python_core.jar', dir: '/Applications/Micro-Manager-2.0.0-beta3-20181001/plugins/Micro-Manager')
        plugin_libs fileTree(include: ['*.jar'], dir: '/Applications/Micro-Manager-2.0.0-beta3-20181001/plugins/Micro-Manager')
        complete_libs fileTree(include: ['*.jar'], dir: '/Applications/Micro-Manager-2.0.0-beta3-20181001/plugins/Micro-Manager')
        // example jar of difference between projector and projectorplugin
//        compile fileTree(include: ['ProjectorPlugin.jar'], dir: '/Applications/Micro-Manager-2.0.0-beta3-20181001/mmplugins')

        // ImageJ
        compile fileTree(include: ['*.jar'], dir: '/Applications/Micro-Manager-2.0.0-beta3-20181001/ij.jar')
        plugin_libs fileTree(include: ['*.jar'], dir: '/Applications/Micro-Manager-2.0.0-beta3-20181001/ij.jar')
        complete_libs fileTree(include: ['*.jar'], dir: '/Applications/Micro-Manager-2.0.0-beta3-20181001/ij.jar')

    }
    else if(OperatingSystem.current().isWindows()) {

        // Micromanager core jars
        compile fileTree(include: ['*.jar'], exclude: 'mm2Python_core.jar', dir: 'C:\\Program Files\\Micro-Manager-2.0beta_20181001\\plugins\\Micro-Manager')
        plugin_libs fileTree(include: ['*.jar'], dir: 'C:\\Program Files\\Micro-Manager-2.0beta_20181001\\plugins\\Micro-Manager')
        complete_libs fileTree(include: ['*.jar'], dir: 'C:\\Program Files\\Micro-Manager-2.0beta_20181001\\plugins\\Micro-Manager')
        // example jar of difference between projector and projectorplugin
//        compile fileTree(include: ['ProjectorPlugin.jar'], dir: '/Applications/Micro-Manager-2.0.0-beta3-20181001/mmplugins')

        // ImageJ
        compile fileTree(include: ['*.jar'], dir: 'C:\\Program Files\\Micro-Manager-2.0beta_20181001\\ij.jar')
        plugin_libs fileTree(include: ['*.jar'], dir: 'C:\\Program Files\\Micro-Manager-2.0beta_20181001\\ij.jar')
        complete_libs fileTree(include: ['*.jar'], dir: 'C:\\Program Files\\Micro-Manager-2.0beta_20181001\\ij.jar')

    }

    //zeroMQ
    compile group: 'org.zeromq', name: 'jzmq', version: '2.1.0'

    //Py4J
    compile group: 'net.sf.py4j', name: 'py4j', version: '0.10.8.1'
    core_libs group: 'net.sf.py4j', name: 'py4j', version: '0.10.8.1'
    complete_libs group: 'net.sf.py4j', name: 'py4j', version: '0.10.8.1'

    // IntelliJ mm2python.UI Designer
    compile group: 'com.intellij', name: 'forms_rt', version: '7.0.3'
    core_libs group: 'com.intellij', name: 'forms_rt', version: '7.0.3'
    complete_libs group: 'com.intellij', name: 'forms_rt', version: '7.0.3'

}

repositories {
    jcenter()
    mavenCentral()
}

jar {
    archiveName = "mm2Python_core.jar"
//    from sourceSets.main.output
    exclude '/mm2PythonPlugin.class'
    from {
        configurations.core_libs.collect {it.isDirectory() ? it : zipTree(it) }
    }
    project.logger.lifecycle("creating Core Jar with dependencies")
}

// Include ONLY Py4J and IntelliJ designer in this jar
//task coreJar(type: Jar) {
//    archiveName = "mm2Python_core.jar"
//    from sourceSets.main.output
//    exclude '/mm2PythonPlugin/mm2PythonPlugin.class'
//    exclude '/mm2PythonPlugin/*.*'
//    from {
//        configurations.core_libs.collect {it.isDirectory() ? it : zipTree(it) }
//    }
//    project.logger.lifecycle("creating Core Jar with dependencies")
//}

//// Include ONLY ImageJ and mmCore in this Jar
//task pluginJar(type: Jar) {
//    archiveName = "mm2Python_plugin.jar"
//    from sourceSets.main.output
//    include '/mm2PythonPlugin/mm2PythonPlugin.class'
//    from {
//        configurations.plugin_libs.collect {it.isDirectory() ? it : zipTree(it) }
//    }
//    project.logger.lifecycle("creating Plugin Jar with dependencies")
//}
//
//// Complete package
//task completeJar(type: Jar) {
//    archiveName = "mm2Python_complete.jar"
//    from {
//        configurations.complete_libs.collect {it.isDirectory() ? it : zipTree(it) }
//    }
//    project.logger.lifecycle("creating Complete Jar with dependencies")
//}


task copyCoreToMM(type: Copy) {
    if(OperatingSystem.current().isMacOsX()) {
        from 'build/libs/mm2Python_core.jar'
        into "/Applications/Micro-Manager-2.0.0-beta3-20181001/plugins/Micro-Manager"
        project.logger.lifecycle("moving CORE jar to micro-manager root")
    }
    else if(OperatingSystem.current().isWindows()) {
        from 'build/libs/mm2Python_core.jar'
        into "C:\\Program Files\\Micro-Manager-2.0beta_20181001\\plugins\\Micro-Manager"
        project.logger.lifecycle("moving CORE jar to micro-manager root")
    }
}

//task copyPluginToMM(type: Copy) {
//    from 'build/libs/mm2Python_plugin.jar'
//    into "/Applications/Micro-Manager-2.0.0-beta3-20181001/mmplugins"
//    project.logger.lifecycle("moving PLUGIN jar to mmplugins folder")
//}



//task pluginJar(type: Jar) {
//    archiveName = "mm2Python_plugin.jar"
////    dependsOn compileJava
//    from sourceSets.main.output
////    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//    include('*.class')
////    jar.includeEmptyDirs = false
//}

//task fatJar(type: Jar) {
//    manifest {
//        attributes 'Implementation-Title': 'micromanager 2.0 bridge to python example',
//                'Implementation-Version': version
//    }
////    baseName = project.name +'-all'
//    archiveName = "mm2Python_core_fat.jar"
////    exclude 'pythonBridgePluginInterface.class'
//
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
////    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}

//task copyPluginToMM(type: Copy) {
//    from 'build/libs/mm2Python_plugin.jar'
//    into "/Applications/Micro-Manager-2.0.0-beta3-20181001/mmplugins"
//}



//task movejar() {
//    apply plugin: 'java'
//    tasks.withType() {
//        destinationDir = file("/Applications/Micro-Manager-2.0.0-beta3-20181001/mmplugins")
//    }
//    tasks.fatJar.execute() {
//        destinationDir = file("/Applications/Micro-Manager-2.0.0-beta3-20181001/plugins")
//    }
//}