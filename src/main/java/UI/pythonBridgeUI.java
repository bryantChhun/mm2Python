/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import java.awt.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import org.micromanager.Studio;
import messenger.Py4J.Py4J;
import mmEventHandler.globalEvents;

/**
 *
 * @author bryant.chhun
 */


public class pythonBridgeUI extends javax.swing.JFrame {
    private static Studio mm;
    private Py4J gate;
    private globalEvents gevents;
    private reports reporter;

    /**
     * 
     * @param mm_ 
     */
    public pythonBridgeUI(Studio mm_) {
        initComponents();
        mm = mm_;
        reporter = new reports(UI_logger_textArea);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - Bryant Chhun
    private void initComponents() {
        create_python_bridge = new JButton();
        tempImg_path = new JTextField();
        monitorGlobalEvents = new JButton();
        Stop_Global_monitor = new JButton();
        UI_logger = new JScrollPane();
        UI_logger_textArea = new JTextArea();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        Container contentPane = getContentPane();

        //---- create_python_bridge ----
        create_python_bridge.setText("Create Python Bridge");
        create_python_bridge.addActionListener(e -> create_python_bridgeActionPerformed(e));

        //---- tempImg_path ----
        tempImg_path.setText("path for temp files");

        //---- monitorGlobalEvents ----
        monitorGlobalEvents.setText("startGlobalMonitor");
        monitorGlobalEvents.addActionListener(e -> monitorGlobalEventsActionPerformed(e));

        //---- Stop_Global_monitor ----
        Stop_Global_monitor.setText("STOP global monitor");
        Stop_Global_monitor.addActionListener(e -> Stop_Global_monitorActionPerformed(e));

        //======== UI_logger ========
        {

            //---- UI_logger_textArea ----
            UI_logger_textArea.setColumns(20);
            UI_logger_textArea.setRows(5);
            UI_logger.setViewportView(UI_logger_textArea);
        }

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap(527, Short.MAX_VALUE)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createParallelGroup()
                            .addComponent(tempImg_path, GroupLayout.PREFERRED_SIZE, 563, GroupLayout.PREFERRED_SIZE)
                            .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(create_python_bridge)
                                    .addGap(421, 421, 421))
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(monitorGlobalEvents)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Stop_Global_monitor)
                                    .addGap(59, 59, 59))))
                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                            .addComponent(UI_logger, GroupLayout.PREFERRED_SIZE, 528, GroupLayout.PREFERRED_SIZE)
                            .addGap(45, 45, 45))))
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(UI_logger, GroupLayout.PREFERRED_SIZE, 408, GroupLayout.PREFERRED_SIZE)
                    .addGap(126, 126, 126)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(monitorGlobalEvents)
                        .addComponent(Stop_Global_monitor))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                    .addComponent(create_python_bridge)
                    .addGap(32, 32, 32)
                    .addComponent(tempImg_path, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGap(33, 33, 33))
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void create_python_bridgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_create_python_bridgeActionPerformed
        //check port
        // create gateway on port
        // send mm and others into gateway?
        reporter.set_report_area("creating python bridge");
        gate = new Py4J(mm, UI_logger_textArea);
        gate.startConnection();
        
    }//GEN-LAST:event_create_python_bridgeActionPerformed

    private void monitorGlobalEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitorGlobalEventsActionPerformed

        reporter.set_report_area("monitoring global events");
        gevents = new globalEvents(mm, UI_logger_textArea);
        gevents.registerGlobalEvents();
    }//GEN-LAST:event_monitorGlobalEventsActionPerformed

    private void Stop_Global_monitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Stop_Global_monitorActionPerformed
        // TODO add your handling code here:
        reporter.set_report_area("STOP monitoring global events");
        gevents.unRegisterGlobalEvents();
    }//GEN-LAST:event_Stop_Global_monitorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pythonBridgeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pythonBridgeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pythonBridgeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pythonBridgeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new pythonBridgeUI(mm).setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - Bryant Chhun
    private JButton create_python_bridge;
    private JTextField tempImg_path;
    private JButton monitorGlobalEvents;
    private JButton Stop_Global_monitor;
    private JScrollPane UI_logger;
    private JTextArea UI_logger_textArea;
    // End of variables declaration//GEN-END:variables
}
