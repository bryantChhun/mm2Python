/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mm2python.mmEventHandler;

import mm2python.UI.reporter;
import org.micromanager.Studio;
import org.micromanager.display.DisplayWindow;

import javax.swing.JTextArea;

import mm2python.DataStructures.constants;

import com.google.common.eventbus.Subscribe;
import java.util.concurrent.ExecutorService;
import mm2python.mmEventHandler.Executor.main_executor;
import org.micromanager.events.DisplayAboutToShowEvent;


/**
 *
 * @author bryant.chhun
 */
public class globalEvents {
    private final Studio mm;

    private final ExecutorService mmExecutor;

    /**
     * For registering micro-manager global events.
     *   See here for more details about mm API events:
     *   https://micro-manager.org/wiki/Version_2.0_API_Events
     *
     * @param mm_: micro-manager Studio object generated by the UI
     * @param UI_textArea: UI reporting area for messages
     */
    public globalEvents(Studio mm_, JTextArea UI_textArea) {
        mm = mm_;
        mmExecutor = main_executor.getExecutor();
        reporter.set_report_area(true, false, "global events filename = "+constants.RAMDiskName);
    }

    /**
     * Register this class for notifications from micro-manager.
     */
    public void registerGlobalEvents() { 
        mm.events().registerForEvents(this);
    }

    /**
     * Unregister this class for notificaitons from micro-manager
     */
    public void unRegisterGlobalEvents() {
        reporter.set_report_area(true, false,"shutting down event monitoring and clearing dequeue references");
        reporter.set_report_area("shutting down event monitoring and clearing dequeue references");
        constants.resetAll();
        mm.events().unregisterForEvents(this);
    }

    /**
     * When this class is registered for events, 'monitor_aboutToShow' receives the
     *  'DisplayAboutToShowEvent' event.
     * Every instance of the display event kicks off a thread using the Singleton mmExecutor
     *
     * @param event: micro-manager event type.
     */
    @Subscribe
    public void monitor_aboutToShow(DisplayAboutToShowEvent event) {
        reporter.set_report_area("DisplayAboutToShowEvent event detected");

        DisplayWindow dw = event.getDisplay();

        mmExecutor.execute(new globalEventsThread(mm, dw));
    }
    
}
